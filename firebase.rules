// Firestore Security Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Following and followers subcollections
      match /following/{followId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      match /followers/{followerId} {
        allow read, write: if request.auth != null;
      }
    }
    
    // Posts are readable by authenticated users, writable by owner
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
      }
    }
    
    // Chats are readable/writable by participants
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Settings document (global app settings)
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins via Cloud Functions
    }
  }
}

// Storage Security Rules
service firebase.storage {
  match /b/{bucket}/o {
    // Users can upload to their own folder
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Posts media accessible to all authenticated users
    match /posts/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
  }
}